@page "/authentication/login"
@using Microsoft.Identity.Firebase.Models
@using Microsoft.Identity.Firebase.Models.Account
@inject NavigationManager NavigationManager
@inject IJSRuntime _jsRuntime

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="@OnValidSubmit" id="login-form">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.Email" class="form-control" autocomplete="email" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" autocomplete="current-password" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button type="submit" class="btn btn-primary" form="login-form">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Login
            </button>
            
            <NavLink href="authentication/login" class="btn btn-link">Cancel</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private LoginUser model = new LoginUser();
    private bool loading = true;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) loading = false;
    }

    private async Task OnValidSubmit()
    {
        loading = true;
        try
        {
            var firebaseUser = await FirebaseAuth.SignInEmailUserAsync(model.Email, model.Password, _jsRuntime);
            if (firebaseUser is not null) {
                NavigationManager.NavigateTo("/");
                return;
            }
        }
        catch
        {
        }
        StateHasChanged();
        loading = false;
    }
}